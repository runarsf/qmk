#!/usr/bin/env bash
# vim: set foldmethod=marker nomodeline:
set -o errexit   # abort on nonzero exit status
set -o nounset   # abort on unbound variable
set -o pipefail  # don't hide errors within pipes
set -o noclobber # disallow redirect overwriting

# TODO: qmkUser
# git submodule update --init --recursive

# Arguments {{{
qmkUser="${USER}" noop='eval' silent='' buildOnly='' qmkFirmwarePath='./qmk_firmware'
positional=()
while test "${#}" -gt "0"; do
  case "${1}" in
    -b|--build)
      buildOnly='true'
      shift;;
    -u|--user)
      qmkUser="${2}"
      shift;shift;;
    -q|--qmk)
      qmkFirmwarePath="${2}"
      shift;shift;;
    -n|--noop)
      noop='echo'
      shift;;
    -s|--silent)
      silent='true'
      shift;;
    *)
      positional+=("${1}")
      shift;;
  esac
done

if test "${#positional[@]}" -ne "1"; then
  printf "Exactly one positional argument is required.\n"
  exit 1
fi
# }}}

targetLayout="${positional[0]}"

case "${targetLayout}" in
  planck*)
    targetKeyboard='planck'
    makePrefix='planck/rev6'
    makeSuffix=':dfu-util-wait'
    imageExtension='bin'
    ;;
  preonic*)
    targetKeyboard='preonic'
    makePrefix='preonic/rev3'
    makeSuffix=':dfu-util-wait'
    imageExtension='bin'
    ;;
  *)
    targetKeyboard="${targetLayout}"
    makePrefix="${targetLayout}"
    makeSuffix=''
    imageExtension='hex'
esac

binaryName="${targetLayout}_${qmkUser}.${imageExtension}"

test -z "${silent}" \
  && printf "Using firmware folder '${qmkFirmwarePath}'\n" \
  && printf "Layout: ${targetLayout}\n" \
  && printf "Building binary '${binaryName}'\n"

test -z "${silent}" \
  && printf "Copying keymap '${makePrefix}:${qmkUser}'\n"
"${noop}" "rsync -avh \
  "${targetLayout}/config.h" \
  "${targetLayout}/keymap.c" \
  "${targetLayout}/rules.mk" \
  "${qmkFirmwarePath}/keyboards/${targetKeyboard}/keymaps/${qmkUser}/""

test -z "${silent}" \
  && printf "Copying ./common to ${qmkFirmwarePath}/users/${qmkUser}/\n"
"${noop}" "rsync -avh --delete \
  "./common/" \
  "${qmkFirmwarePath}/users/${qmkUser}/""

"${noop}" "make --directory="${qmkFirmwarePath}" git-submodule"

"${noop}" "rm -rf "${qmkFirmwarePath}/${targetLayout}_${qmkUser}.bin"" # TODO: Should this be the same as $binaryName?

if test -n "${buildOnly}"; then
  "${noop}" "${qmkFirmwarePath}/util/docker_build.sh ${makePrefix}:${qmkUser}"
else
  "${noop}" "${qmkFirmwarePath}/util/docker_build.sh ${makePrefix}:${qmkUser}${makeSuffix}"
fi
